"""Initial Migration

Revision ID: 0261f902d4b2
Revises: 
Create Date: 2025-03-13 15:25:34.211459

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '0261f902d4b2'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('itineraries')
    op.drop_table('expenses')
    op.drop_table('media')
    op.drop_table('user_trips')
    op.drop_index('idx_trips_created_by', table_name='trips')
    op.drop_table('trips')
    op.drop_index('idx_friends_user', table_name='friends')
    op.drop_table('friends')
    op.drop_index('idx_trip_members', table_name='trip_members')
    op.drop_table('trip_members')
    op.drop_table('chats')
    op.drop_table('trip_invites')
    op.add_column('users', sa.Column('id', sa.Integer(), nullable=False))
    op.alter_column('users', 'name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               nullable=True)
    op.alter_column('users', 'email',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               nullable=True)
    op.drop_index('idx_users_email', table_name='users')
    op.drop_constraint('users_email_key', 'users', type_='unique')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_name'), 'users', ['name'], unique=False)
    op.drop_column('users', 'profile_picture')
    op.drop_column('users', 'created_at')
    op.drop_column('users', 'updated_at')
    op.drop_column('users', 'user_id')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('user_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False))
    op.add_column('users', sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('profile_picture', sa.TEXT(), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_users_name'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_unique_constraint('users_email_key', 'users', ['email'])
    op.create_index('idx_users_email', 'users', ['email'], unique=False)
    op.alter_column('users', 'email',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               nullable=False)
    op.alter_column('users', 'name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               nullable=False)
    op.drop_column('users', 'id')
    op.create_table('trip_invites',
    sa.Column('invite_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('trip_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('sender_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('receiver_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('invite_link', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('status', sa.TEXT(), server_default=sa.text("'pending'::text"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.CheckConstraint("status = ANY (ARRAY['pending'::text, 'accepted'::text, 'declined'::text])", name='trip_invites_status_check'),
    sa.ForeignKeyConstraint(['receiver_id'], ['users.user_id'], name='trip_invites_receiver_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['sender_id'], ['users.user_id'], name='trip_invites_sender_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['trip_id'], ['trips.trip_id'], name='trip_invites_trip_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('invite_id', name='trip_invites_pkey'),
    sa.UniqueConstraint('invite_link', name='trip_invites_invite_link_key')
    )
    op.create_table('chats',
    sa.Column('message_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('trip_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['trip_id'], ['trips.trip_id'], name='chats_trip_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name='chats_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('message_id', name='chats_pkey')
    )
    op.create_table('trip_members',
    sa.Column('member_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('trip_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('role', sa.TEXT(), server_default=sa.text("'member'::text"), autoincrement=False, nullable=True),
    sa.Column('joined_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.CheckConstraint("role = ANY (ARRAY['admin'::text, 'member'::text])", name='trip_members_role_check'),
    sa.ForeignKeyConstraint(['trip_id'], ['trips.trip_id'], name='trip_members_trip_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name='trip_members_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('member_id', name='trip_members_pkey')
    )
    op.create_index('idx_trip_members', 'trip_members', ['trip_id', 'user_id'], unique=False)
    op.create_table('friends',
    sa.Column('friendship_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id_1', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('user_id_2', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('status', sa.TEXT(), server_default=sa.text("'pending'::text"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.CheckConstraint("status = ANY (ARRAY['pending'::text, 'accepted'::text, 'rejected'::text])", name='friends_status_check'),
    sa.ForeignKeyConstraint(['user_id_1'], ['users.user_id'], name='friends_user_id_1_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id_2'], ['users.user_id'], name='friends_user_id_2_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('friendship_id', name='friends_pkey')
    )
    op.create_index('idx_friends_user', 'friends', ['user_id_1', 'user_id_2'], unique=False)
    op.create_table('trips',
    sa.Column('trip_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('trip_name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('start_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('end_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('location', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('is_public', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('trip_status', sa.TEXT(), server_default=sa.text("'incoming'::text"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.CheckConstraint("trip_status = ANY (ARRAY['incoming'::text, 'ongoing'::text, 'complete'::text])", name='trips_trip_status_check'),
    sa.ForeignKeyConstraint(['created_by'], ['users.user_id'], name='trips_created_by_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('trip_id', name='trips_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_trips_created_by', 'trips', ['created_by'], unique=False)
    op.create_table('user_trips',
    sa.Column('record_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('trip_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('trip_status', sa.TEXT(), server_default=sa.text("'incoming'::text"), autoincrement=False, nullable=True),
    sa.CheckConstraint("trip_status = ANY (ARRAY['incoming'::text, 'ongoing'::text, 'complete'::text])", name='user_trips_trip_status_check'),
    sa.ForeignKeyConstraint(['trip_id'], ['trips.trip_id'], name='user_trips_trip_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name='user_trips_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('record_id', name='user_trips_pkey')
    )
    op.create_table('media',
    sa.Column('media_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('trip_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('media_url', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('media_type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('uploaded_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.CheckConstraint("media_type = ANY (ARRAY['image'::text, 'video'::text])", name='media_media_type_check'),
    sa.ForeignKeyConstraint(['trip_id'], ['trips.trip_id'], name='media_trip_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name='media_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('media_id', name='media_pkey')
    )
    op.create_table('expenses',
    sa.Column('expense_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('trip_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['trip_id'], ['trips.trip_id'], name='expenses_trip_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name='expenses_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('expense_id', name='expenses_pkey')
    )
    op.create_table('itineraries',
    sa.Column('itinerary_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('trip_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('time', postgresql.TIME(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['trip_id'], ['trips.trip_id'], name='itineraries_trip_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('itinerary_id', name='itineraries_pkey')
    )
    # ### end Alembic commands ###
